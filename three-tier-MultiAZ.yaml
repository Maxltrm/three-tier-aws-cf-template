AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: 'AWS CloudFormation Template:
    1 x VPC
    2 x AZ
    2 x Public Subnet
    4 x Private Subnet
    1 x Internet Gateway
    1 x Nat Gateway
    1 x Elastic Load Balancer'

Parameters:

  AccessKeyId:
    Description: Access key for the automation user
    Type: String
    NoEcho: true

  SecretAccessKey:
    Description: Secret key for the automation user
    Type: String
    NoEcho: true

  DefaultRegion:
    Default: eu-west-1
    Type: String

  VpcCidrBlock:
    Description: The VPC CIDR Block
    Type: String
    Default: 10.0.0.0/16
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR

  VpcTenancy:
    Description: The allowed tenancy default or dedicated
    Type: String
    Default: default
    AllowedValues: [default, dedicated]

  KeyName:
    Description: EC2 KeyPair to access to the instances
    Type: AWS::EC2::KeyPair::KeyName

  InstanceType:
    Description: WebServer EC2 type
    Type: String
    Default: t2.nano
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large]

  LatestAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  #### BASTION SECTION ####
  
  BastionSGCidr:
    Description: Specify your public IP to access Bastion Host
    Default: 0.0.0.0/0
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})

  PublicSubnet1CIDR:
    Default: 10.0.10.0/24
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})

  PublicSubnet2CIDR:
    Default: 10.0.20.0/24
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})

  PrivateSubnet1CIDR:
    Default: 10.0.30.0/24
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})

  PrivateSubnet2CIDR:
    Default: 10.0.40.0/24
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})

  PrivateSubnet3CIDR:
    Default: 10.0.50.0/24
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})

  PrivateSubnet4CIDR:
    Default: 10.0.60.0/24
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})

  AvailabilityZoneA:
    Default: eu-west-1a
    Type: String
    AllowedValues: [eu-west-1a, eu-west-1b, eu-west-1c]

  AvailabilityZoneB:
    Default: eu-west-1b
    Type: String
    AllowedValues: [eu-west-1a, eu-west-1b, eu-west-1c]

Rules:
  ValidateNotEqualAZ:
    Assertions:
      - AssertDescription: Availability zone can't be the same
        Assert:
          "Fn::Not":
            - "Fn::Equals":
               - !Ref AvailabilityZoneA
               - !Ref AvailabilityZoneB

Resources:

  #### NETWORK SECTION ####

  #### VPC Definition ####

  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'VpcCidrBlock'
      EnableDnsHostnames: True
      EnableDnsSupport: True
      InstanceTenancy: !Ref 'VpcTenancy'

  #### Internet GW ####

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  #### Attach Internet GW to VPC ####

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId:
        Ref: InternetGateway

  #### Public subnet and route table creation
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZoneA
      CidrBlock: !Ref PublicSubnet1CIDR
      VpcId: !Ref myVPC
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZoneB
      CidrBlock: !Ref PublicSubnet2CIDR
      VpcId: !Ref myVPC
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: PublicSubnetRouteTable

  #### Route table association ####

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnet2

  InternetGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:  !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable
      
  NATGatewayRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: NATGatewayRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NATGatewayRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NATGatewayRouteTable
      SubnetId: !Ref PrivateSubnet2

  #### NAT Gateway and EIP Creation #### 
  
  NATGatewayEIP:
     Type: AWS::EC2::EIP
     Properties:
       Domain: vpc

  NATGateway:
     Type: AWS::EC2::NatGateway
     Properties:
        AllocationId: !GetAtt 'NATGatewayEIP.AllocationId'
        SubnetId: !Ref PublicSubnet1

  #### NAT Gateway route #### 

  NATGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:  !Ref NATGateway
      RouteTableId: !Ref NATGatewayRouteTable

  #### Private Subnet creation ####

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZoneA
      CidrBlock: !Ref PrivateSubnet1CIDR
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZoneB
      CidrBlock: !Ref PrivateSubnet2CIDR
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZoneA
      CidrBlock: !Ref PrivateSubnet3CIDR
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: PrivateSubnet3

  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZoneB
      CidrBlock: !Ref PrivateSubnet4CIDR
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: PrivateSubnet4

  #### BASTION SECTION ####

  ### Create Bastion SG ###

  BastionSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ssh and HTTP trafic
      VpcId:
        Ref: myVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'BastionSGCidr'
      Tags:
        - Key: Name
          Value: bastion-sg

  BastionLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref 'LatestAmiId'
      KeyName: !Ref 'KeyName'
      InstanceType: !Ref 'InstanceType'
      SecurityGroups: [ !Ref 'BastionSG' ]
      UserData: 
        Fn::Base64:
          !Sub |
            #!/bin/bash
            ## Script used to dynamically attach the EIP to the bastion instance during the boot process
            export AWS_ACCESS_KEY_ID=${AccessKeyId}
            export AWS_SECRET_ACCESS_KEY=${SecretAccessKey}
            export AWS_DEFAULT_REGION=${DefaultRegion}
            ## Get the EIP not yet associated
            EIP=$(aws ec2 describe-addresses --output text | awk '{ if ( $3 !~ /eipassoc-*/ ) print $4 }')
            instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            aws ec2 associate-address --instance-id $instance_id --public-ip $EIP
  BastionASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]
      LaunchConfigurationName: !Ref BastionLaunchConfiguration
      MinSize: "1"
      MaxSize: "1"
      Tags:
        - Key: Name
          Value: EC2BastionHost
          PropagateAtLaunch: "true"
    ## DependsOn NATGateway to be sure that the not associated EIP is the EIPBastionHost below
    DependsOn: NATGateway

  EIPBastionHost:
    Type: AWS::EC2::EIP
    Properties: 
      Domain: vpc

  #### LOADBALANCER SECTION ####

  ### Target Group ###

  myTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: True
      Name: feTargets
      Port: 80
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref myVPC

  ### Load Balancer ###

  myLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: myLoadBalancer
      Scheme: internet-facing
      Subnets: [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]
      Type: network

  #### FRONTEND SECTION ####

  ManagementSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ssh from bastion host
      VpcId: !Ref myVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId: !Ref 'BastionSG'
      Tags:
        - Key: Name
          Value: mgmt-sg

  WebSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ssh from bastion host
      VpcId: !Ref myVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: web-sg

  FrontEndLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      ImageId: !Ref 'LatestAmiId'
      KeyName: !Ref 'KeyName'
      InstanceType: !Ref 'InstanceType'
      SecurityGroups: [ !Ref 'ManagementSG', !Ref 'WebSG' ]
  FrontEndASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]
      LaunchConfigurationName: !Ref FrontEndLaunchConfiguration
      MinSize: "2"
      MaxSize: "4"
      TargetGroupARNs: [ !Ref myTargetGroup ]
      Tags:
        - Key: Name
          Value: FEInstances
          PropagateAtLaunch: "true"
  CPUPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref FrontEndASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 30

  ### Listener ###

  myListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref myTargetGroup
      LoadBalancerArn: !Ref myLoadBalancer
      Port: 80
      Protocol: TCP

#  #### DATABASE SECTION ####
#
#  DataBaseSG:
#    Type: AWS::RDS::DBSecurityGroup
#    Properties:
#      EC2VpcId: !Ref myVPC
#      DBSecurityGroupIngress:
#        - EC2SecurityGroupId: !Ref 'WebSG'
#      GroupDescription: "Frontend Access"
#      Tags:
#        - Key: Name
#          Value: db-sg
#
#  DBSubnetGroup:
#    Type: AWS::RDS::DBSubnetGroup
#    Properties: 
#      DBSubnetGroupDescription: String
#      DBSubnetGroupName: String
#      SubnetIds: [ !Ref PrivateSubnet3, !Ref PrivateSubnet4 ]
#
#  DataBase:
#    Type: AWS::RDS::DBInstance
#    Properties: 
#      DBSecurityGroups: [ !Ref 'DataBaseSG' ]
#      AllocatedStorage: 10
#      AllowMajorVersionUpgrade: False
#      BackupRetentionPeriod: 7
#      CopyTagsToSnapshot: True
#      DBInstanceClass: db.t2.micro
#      DBName: demo
#      DBSubnetGroupName: !Ref 'DBSubnetGroup'
#      DeletionProtection: False
#      Engine: MySQL
#      MasterUsername: admin
#      MasterUserPassword: max12345
#      MultiAZ: True
